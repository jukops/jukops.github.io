---
layout: post
title: "MVCC 다중 버전 동시성 제어"
date: 2020-04-12 15:22:00
author: Juhyeok Bae
categories: DB
---
# 소개
DBMS의 경우 여러 클라이언트/유저가 접근 한다. 이 경우 여러 유저가 같은 데이터를 접근 하는 경우가 생기는데 이때 데이터의 동시성 제어가 되어야 한다. 이 동시성 제어를 잘못하면 데이터의 정합성이 깨지거나 성능 상의 이슈가 발생 한다. 따라서 같은 시간에 실행 되는 트랜잭션 수를 최대로 하며 데이의 무결성을 유지할 수록 좋은 알고리즘이라 할 수 있다.  
동시성 제어에는 Lock을 이용하는 일반 동시성제어와 버전을 통해 관리하는 다중 버전 동시성 제어가 있다. 이 글에서 두 동시성 제어에 대해 알아 고보자 한다.  

# 동시성제어 종류
아래는 Lock과 set transaction(격리 수준 조정)을 이용하는 기본적인 동시성제어이다. 구현이 간단 하지만 Lock을 할 경우 다른 데이터의 접근이 힘들기 때문에 성능이 떨어지는 단점이 있다. 또한 롤백을 자주 발생 시키는 경우도 있음으로 리소스 낭비를 초래하는 단점도 존재한다.
- **Pessimistic Concurrency Control**
  - 같은 데이터를 여러 사용자가 동시에 수정 하는 경우에 해당함.
  - 데이터를 읽을때 즉 select 시점에 해당 데이터에 대해 Lock 설정 후 트랜젝션 완료 될때 까지 Lock을 유지.
  - 데이터의 정합성 유지에는 좋으나, Lock 대기시간이 발생 및 데드락 발생 가능성 존재함.
  - Lock 상태가 되면 시스템의 동시성을 심각하게 떨어트릴 수 있으니 wait 또는 nowait 옵션과 함께 사용해야 성능 저하를 좀 더 막을 수 있음.
- **Optimistic Concurrency Control**
  - 같은 데이터를 동시에 수정 안하는 경우에 해당함. 즉 한순간에 한 유저만 데이터 수정.
  - 데이터를 읽는 시점에 Lock을 걸지 않으나, 값 수정 시점에 변경 되었는지 확인.
  - 트랜잭션 대기시간은 적으나 트랜잭션을 철회 하는 경우 발생시 자원 및 시간낭비가 발생함.
- **Timestamp**
  - 동시에 여러 트랜잭션 발생 하는 경우 해당함.
  - 동시에 여러 트랜잭션이 일어 났을시 타임스탬프 기준으로 직렬화 하여 처리.
  - 트랜잰션 대기시간과 데드락 가능성은 적으나 rollback 확률이 높다.
  - read 연산을 성공적으로 수행한 트랜잭션 중 타임스탬프가 가장 큰것을 read_TS 라고 하며, write 연산을 성공적으로 수행한 트랙잭션 중 타임스탬프가 가장 큰것을 write_TS라고 한다.

# 다중 버전 동시성제어
### 정의
일반 동시성제어에서 데이터 무결성을 위해 데이터/테이블 Lock시 읽기와 쓰기 작업이 서로 방해를 일으킴으로 동시성 문제가 발생한다. 다중 버전 동시성제어는 이 Locking으로 인한 동시성 문제를 해결 하기 위해 고안된 방법이다. 동시성 문제를 해결 하기 위해 데이터에 버전을 만들어 관리하며 데이터를 접근 하는 시점의 DB snapshot을 읽어 데이터를 사용 하는 방법이다.  
특정 데이터에 대해 1번 트랜잭션이 일어나 데이터 수정 중 해당 데이터에 대해 2번 트랜잭션이 발생하는 경우, 2번 트랜잭션은 1번 트랜잭션이 변경 한 데이터가 아닌 2번 트랜잭션이 접근시점 버전의 데이터를 이용한다.

### 특징
- 데이터나 테이블에 대해 잠금이 필요 없음으로 Lock을 이용하는 RDBMS 보다 빠르게 처리.
- 데이터를 읽을때 다른 사람이 해당 데이터 수정해도 영향 없이 데이터 사용 가능.
- 사용하지 않는 데이터가 쌓임으로 이를 정리하는 시스템 필요.
- 데이터 버전 충돌시 App 영역에서 문제를 해결 해야함(Git과 비슷)
- undo block I/O, CR copy 생성, CR block 캐싱 등 부가적인 오버헤드 발생.

### 동작순서
- Read 시점
  1) 트랜잭션 시작. 트랜잭션 수행 당시 SCN은 100.
  2) 특정 데이터를 읽을 시 SCN이 100과 같거나 작은 데이터에 대해서는 읽기 수행.
     SCN이 100 보다 크다면 CR Copy를 수행해 이미지를 복사하고 undo 영역의 내용을 적용해 이전 시점 블록 이미지를 생성.
  3) 트랜잭션 시점의 데이터인 SCM 100 이하 버전의 데이터를 읽음.

- Write 시점<MySQL>
  1) 특정 데이터 변경 트랜잭션 시작
  2) 기존 데이터를 undo 로그에 저장.
  3) 새로운 데이터 기록 후 commit. 만약 rollback시 undo 영역에 있는 데이터로 복구.
  4) 데이터가 반영 되며 undo 영역을 사용 하는 트랜잭션이 있는 경우 undo 를 유지. 만약 없다면 undo 로그 삭제.

### 읽기 일관성 수준
- **Statement-level Read consistency**
다른 트랜잭션에 의해 데이터의 수정이 발생 하더라도 단일 SQL에서 일관성 있게 값을 읽는것. 일관성 기준 시점은 쿼리 시작지점이 됨. 쿼리 시작 이후에 변경된 데이터 블록 만날시 rollback(undo) segment에 저장된 정보를 이용해 쿼리 시작 이전 시점으로 돌리고 값을 읽음.

- **Transaction-level Read consistency**
다른 트랜젝션에 의해 데이터의 수정이 발생 하더라도 해당 트랜잭션 내에서 일관성 있게 값을 읽는것. 기본적으로는 트랜잭션 레벨의 일관성을 보장 하지 않기 때문에 serializable read 수준으로 올려야 한다. 설정 후에는 일관성 기준 시점이 트랜잭션 시작 시점이 된다. 트랜잭션 진행 되는 동안 자신이 변경한 사항은 이전 버전 데이터가 아니라 변경된 데이터로 읽는다.
